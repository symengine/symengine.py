version: '{build}'

image: "Visual Studio 2019"

environment:
  global:
    PLATFORMTOOLSET: "v142"

  matrix:
    - BUILD_TYPE: "Release"
      COMPILER: MSVC15
      PLATFORM: "Win32"
      PYTHON_VERSION: 39
      CONDA_INSTALL_LOCN: C:\\Miniconda38-x64
      WITH_MPFR: yes
      WITH_MPC: yes
    - BUILD_TYPE: "Release"
      COMPILER: MSVC15
      PLATFORM: "x64"
      PYTHON_VERSION: 310-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda38-x64
      WITH_MPFR: yes
      WITH_MPC: yes
    - BUILD_TYPE: "Release"
      COMPILER: MSVC15
      PLATFORM: "x64"
      PYTHON_VERSION: 312-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda38-x64
    - BUILD_TYPE: "Release"
      COMPILER: MSVC15
      PLATFORM: "x64"
      PYTHON_VERSION: 39-x64
      WITH_SYMPY: no
      CONDA_INSTALL_LOCN: C:\\Miniconda38-x64
    - BUILD_TYPE: "Release"
      COMPILER: MSVC15
      PLATFORM: "x64"
      PYTHON_VERSION: 311-x64
      WITH_NUMPY: no
      CONDA_INSTALL_LOCN: C:\\Miniconda38-x64
    - BUILD_TYPE: "Release"
      COMPILER: MSVC15
      PLATFORM: "x64"
      PYTHON_VERSION: 310-x64
      CONDA_INSTALL_LOCN: C:\\Miniconda38-x64
      WITH_MPFR: yes
      WITH_MPC: yes
      WITH_LLVM: yes

install:
- set PYTHON_SOURCE_DIR=%CD%
- git clone https://github.com/sympy/symengine symengine-cpp
- if [%PLATFORM%]==[Win32] set "CONDA_SUBDIR=win-32"

- call %CONDA_INSTALL_LOCN%\Scripts\activate.bat
- set "CONDA_DEPS=mpir=3.0.0 vc=14"
- if [%WITH_MPFR%]==[yes] set "CONDA_DEPS=%CONDA_DEPS% mpfr=3.1.5"
- if [%WITH_MPC%]==[yes] set "CONDA_DEPS=%CONDA_DEPS% mpc=1.0.3"
- if [%WITH_LLVM%]==[yes] set "CONDA_DEPS=%CONDA_DEPS% llvmdev=4.0"
- set "CONDA_DEPS=%CONDA_DEPS% -c conda-forge"
- if [%BUILD_TYPE%]==[Debug] set "CONDA_DEPS=%CONDA_DEPS% -c symengine/label/debug"
- conda create -n deps --yes %CONDA_DEPS%
- call conda activate deps
- echo %CONDA_PREFIX%
- echo %PATH%
- set "PATH=%PATH%;%CONDA_PREFIX%\\Library\\bin;%CONDA_PREFIX%"
- echo %PATH%

- set "PATH=C:\Python%PYTHON_VERSION%;C:\Python%PYTHON_VERSION%\Scripts;%PATH%"
- echo %PATH%
- pip install pytest cython scikit-build-core cython-cmake setuptools_scm
- if NOT [%WITH_NUMPY%]==[no] pip install numpy
- if NOT [%WITH_SYMPY%]==[no] pip install sympy

- set /p commit=<symengine_version.txt
- cd symengine-cpp
- git checkout %commit%
- mkdir build
- cd build

- set "CMAKE_GENERATOR=Visual Studio 16 2019"
- set "CMAKE_GENERATOR_PLATFORM=%PLATFORM%"

- set "CMAKE_ARGS=-DCMAKE_PREFIX_PATH=%CONDA_PREFIX%\\Library"

- if [%WITH_MPFR%]==[yes] set "CMAKE_ARGS=%CMAKE_ARGS% -DWITH_MPFR=yes"
- if [%WITH_MPC%]==[yes] set "CMAKE_ARGS=%CMAKE_ARGS% -DWITH_MPC=yes"
- if [%WITH_LLVM%]==[yes] set "CMAKE_ARGS=%CMAKE_ARGS% -DWITH_LLVM=yes -DMSVC_USE_MT=no"

- echo "CMAKE_ARGS=%CMAKE_ARGS%"
- cmake %CMAKE_ARGS% -DBUILD_SHARED_LIBS=yes -DBUILD_TESTS=no -DBUILD_BENCHMARKS=no -DCMAKE_INSTALL_PREFIX=C:\symengine ..

- cmake --build . --config %BUILD_TYPE% --target install
- cd ../../

build_script:
- set "PATH=C:\symengine\bin\;%PATH%"
- set "SYMENGINE_PY_ADD_PATH_TO_SEARCH_DIRS=1"
- echo %PATH%
- set "CMAKE_ARGS="
- python install -e . --no-build-isolation -Ccmake.build-type=%BUILD_TYPE% -vv

test_script:
- mkdir empty && cd empty
- python %PYTHON_SOURCE_DIR%\bin\test_python.py

# Enable this to be able to login to the build worker. You can use the
# `remmina` program in Ubuntu, use the login information that the line below
# prints into the log.
# #on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
